diff -rupN pg_shard_orig/distribution_metadata.h pg_shard_test/distribution_metadata.h
--- pg_shard_orig/distribution_metadata.h	2014-12-05 13:27:10.349587360 -0800
+++ pg_shard_test/distribution_metadata.h	2014-12-05 15:08:07.661017623 -0800
@@ -55,7 +55,7 @@
 #define ATTR_NUM_SHARD_PLACEMENT_NODE_PORT 5
 
 /* table containing information about how to partition distributed tables */
-#define PARTITION_TABLE_NAME "partition"
+#define PARTITION_TABLE_NAME "partition_info"
 
 /* denotes partition type of the distributed table */
 #define HASH_PARTITION_TYPE 'h'
diff -rupN pg_shard_orig/distribution_metadata.out pg_shard_test/distribution_metadata.out
--- pg_shard_orig/distribution_metadata.out	1969-12-31 16:00:00.000000000 -0800
+++ pg_shard_test/distribution_metadata.out	2014-12-05 15:08:07.665017223 -0800
@@ -0,0 +1,94 @@
+-- ===================================================================
+-- create test functions
+-- ===================================================================
+CREATE FUNCTION load_shard_id_array(regclass)
+	RETURNS bigint[]
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+CREATE FUNCTION load_shard_interval_array(bigint)
+	RETURNS integer[]
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+CREATE FUNCTION load_shard_placement_array(bigint)
+	RETURNS text[]
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+CREATE FUNCTION partition_column_id(regclass)
+	RETURNS smallint
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+-- ===================================================================
+-- test distribution metadata functionality
+-- ===================================================================
+-- set up a table and "distribute" it manually
+CREATE TABLE events (
+	id bigint,
+	name text
+);
+INSERT INTO pgs_distribution_metadata.shard
+	(id, relation_id, storage, min_value, max_value)
+VALUES
+	(1, 'events'::regclass, 't', '0', '10'),
+	(2, 'events'::regclass, 't', '10', '20'),
+	(3, 'events'::regclass, 't', '20', '30'),
+	(4, 'events'::regclass, 't', '30', '40');
+INSERT INTO pgs_distribution_metadata.shard_placement
+	(id, node_name, node_port, shard_id, shard_state)
+VALUES
+	(101, 'cluster-worker-01', 5432, 1, 0),
+	(102, 'cluster-worker-01', 5432, 2, 0),
+	(103, 'cluster-worker-02', 5433, 3, 0),
+	(104, 'cluster-worker-02', 5433, 4, 0),
+	(105, 'cluster-worker-03', 5434, 1, 0),
+	(106, 'cluster-worker-03', 5434, 2, 0),
+	(107, 'cluster-worker-04', 5435, 3, 0),
+	(108, 'cluster-worker-04', 5435, 4, 0);
+INSERT INTO pgs_distribution_metadata.partition_info (relation_id, partition_method, key)
+VALUES
+	('events'::regclass, 'h', 'name');
+-- should see above shard identifiers
+SELECT load_shard_id_array('events');
+ load_shard_id_array 
+---------------------
+ {4,3,2,1}
+(1 row)
+
+-- should see empty array (catalog is not distributed)
+SELECT load_shard_id_array('pg_type');
+ load_shard_id_array 
+---------------------
+ {}
+(1 row)
+
+-- should see array with first shard range
+SELECT load_shard_interval_array(1);
+ load_shard_interval_array 
+---------------------------
+ {0,10}
+(1 row)
+
+-- should see error for non-existent shard
+SELECT load_shard_interval_array(5);
+ERROR:  could not find entry for shard 5
+-- should see two placements
+SELECT load_shard_placement_array(2);
+           load_shard_placement_array            
+-------------------------------------------------
+ {cluster-worker-03:5434,cluster-worker-01:5432}
+(1 row)
+
+-- should see error for non-existent shard
+SELECT load_shard_placement_array(6);
+ERROR:  could not find any placements for shardId 6
+-- should see column id of 'name'
+SELECT partition_column_id('events');
+ partition_column_id 
+---------------------
+                   2
+(1 row)
+
+-- should see error (catalog is not distributed)
+SELECT partition_column_id('pg_type');
+ERROR:  could not find partition for distributed relation 1247
+-- clean up after ourselves
+DROP TABLE events;
diff -rupN pg_shard_orig/distribution_metadata.sql pg_shard_test/distribution_metadata.sql
--- pg_shard_orig/distribution_metadata.sql	1969-12-31 16:00:00.000000000 -0800
+++ pg_shard_test/distribution_metadata.sql	2014-12-05 15:08:07.676016123 -0800
@@ -0,0 +1,84 @@
+-- ===================================================================
+-- create test functions
+-- ===================================================================
+
+CREATE FUNCTION load_shard_id_array(regclass)
+	RETURNS bigint[]
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+
+CREATE FUNCTION load_shard_interval_array(bigint)
+	RETURNS integer[]
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+
+CREATE FUNCTION load_shard_placement_array(bigint)
+	RETURNS text[]
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+
+CREATE FUNCTION partition_column_id(regclass)
+	RETURNS smallint
+	AS 'pg_shard'
+	LANGUAGE C STRICT;
+
+-- ===================================================================
+-- test distribution metadata functionality
+-- ===================================================================
+
+-- set up a table and "distribute" it manually
+CREATE TABLE events (
+	id bigint,
+	name text
+);
+
+INSERT INTO pgs_distribution_metadata.shard
+	(id, relation_id, storage, min_value, max_value)
+VALUES
+	(1, 'events'::regclass, 't', '0', '10'),
+	(2, 'events'::regclass, 't', '10', '20'),
+	(3, 'events'::regclass, 't', '20', '30'),
+	(4, 'events'::regclass, 't', '30', '40');
+
+INSERT INTO pgs_distribution_metadata.shard_placement
+	(id, node_name, node_port, shard_id, shard_state)
+VALUES
+	(101, 'cluster-worker-01', 5432, 1, 0),
+	(102, 'cluster-worker-01', 5432, 2, 0),
+	(103, 'cluster-worker-02', 5433, 3, 0),
+	(104, 'cluster-worker-02', 5433, 4, 0),
+	(105, 'cluster-worker-03', 5434, 1, 0),
+	(106, 'cluster-worker-03', 5434, 2, 0),
+	(107, 'cluster-worker-04', 5435, 3, 0),
+	(108, 'cluster-worker-04', 5435, 4, 0);
+
+INSERT INTO pgs_distribution_metadata.partition_info (relation_id, partition_method, key)
+VALUES
+	('events'::regclass, 'h', 'name');
+
+-- should see above shard identifiers
+SELECT load_shard_id_array('events');
+
+-- should see empty array (catalog is not distributed)
+SELECT load_shard_id_array('pg_type');
+
+-- should see array with first shard range
+SELECT load_shard_interval_array(1);
+
+-- should see error for non-existent shard
+SELECT load_shard_interval_array(5);
+
+-- should see two placements
+SELECT load_shard_placement_array(2);
+
+-- should see error for non-existent shard
+SELECT load_shard_placement_array(6);
+
+-- should see column id of 'name'
+SELECT partition_column_id('events');
+
+-- should see error (catalog is not distributed)
+SELECT partition_column_id('pg_type');
+
+-- clean up after ourselves
+DROP TABLE events;
diff -rupN pg_shard_orig/expected/distribution_metadata.out pg_shard_test/expected/distribution_metadata.out
--- pg_shard_orig/expected/distribution_metadata.out	2014-12-05 13:27:10.349587360 -0800
+++ pg_shard_test/expected/distribution_metadata.out	2014-12-05 15:10:29.351099177 -0800
@@ -43,7 +43,7 @@ VALUES
 	(106, 'cluster-worker-03', 5434, 2, 0),
 	(107, 'cluster-worker-04', 5435, 3, 0),
 	(108, 'cluster-worker-04', 5435, 4, 0);
-INSERT INTO pgs_distribution_metadata.partition (relation_id, partition_method, key)
+INSERT INTO pgs_distribution_metadata.partition_info (relation_id, partition_method, key)
 VALUES
 	('events'::regclass, 'h', 'name');
 -- should see above shard identifiers
diff -rupN pg_shard_orig/pg_shard--1.0.sql pg_shard_test/pg_shard--1.0.sql
--- pg_shard_orig/pg_shard--1.0.sql	2014-12-05 13:27:10.350587334 -0800
+++ pg_shard_test/pg_shard--1.0.sql	2014-12-05 15:08:07.668016923 -0800
@@ -25,7 +25,7 @@ CREATE SCHEMA pgs_distribution_metadata
 	)
 
 	-- partition lists a partition key for each distributed table
-	CREATE TABLE partition (
+	CREATE TABLE partition_info (
 		relation_id oid unique not null,
 		partition_method "char" not null,
 		key text not null
@@ -47,7 +47,7 @@ SELECT pg_catalog.pg_extension_config_du
 SELECT pg_catalog.pg_extension_config_dump(
 	'pgs_distribution_metadata.shard_placement', '');
 SELECT pg_catalog.pg_extension_config_dump(
-	'pgs_distribution_metadata.partition', '');
+	'pgs_distribution_metadata.partition_info', '');
 
 -- define the table distribution functions
 CREATE FUNCTION master_create_distributed_table(table_name text, partition_column text,
diff -rupN pg_shard_orig/pg_shard.c pg_shard_test/pg_shard.c
--- pg_shard_orig/pg_shard.c	2014-12-05 13:27:10.350587334 -0800
+++ pg_shard_test/pg_shard.c	2014-12-05 15:08:07.670016723 -0800
@@ -1774,7 +1774,7 @@ PgShardProcessUtility(Node *parsetree, c
 
 		/* analyze the statement using these parameter types */
 		parsedQuery = parse_analyze_varparams(rawQuery, queryString,
-											  &argumentTypeArray, &argumentCount);
+											  &argumentTypeArray, &argumentCount, NULL, NULL);
 
 		/* determine if the query runs on a distributed table */
 		plannerType = DeterminePlannerType(parsedQuery);
diff -rupN pg_shard_orig/README.md pg_shard_test/README.md
--- pg_shard_orig/README.md	2014-12-05 13:27:10.348587386 -0800
+++ pg_shard_test/README.md	2014-12-05 15:14:58.865098319 -0800
@@ -46,14 +46,6 @@ Second, the master node in `pg_shard` re
 
 Then, you can save these settings and restart the master node.
 
-### Worker Nodes
-
-Each worker node will need the following to function:
-
-* PostgreSQL up and running
-* PostgreSQL accepting connections from the master node using some form of passwordless connection, such as .pgpass files.
-* An empty database with a name matching the database you intend to shard on the master.  You will need to create this database.
-
 ### Table Sharding
 
 Now, let's log into the master node and create the extension:
@@ -122,7 +114,7 @@ DELETE FROM customer_reviews WHERE custo
 When you distribute a table and create shards for it, `pg_shard` saves related metadata on the master node. You can probe into this metadata by logging into the master and running the following:
 
 ```sql
-SELECT * FROM pgs_distribution_metadata.partition;
+SELECT * FROM pgs_distribution_metadata.partition_info;
 SELECT * FROM pgs_distribution_metadata.shard;
 SELECT * FROM pgs_distribution_metadata.shard_placement;
 ```
diff -rupN pg_shard_orig/ruleutils_94.c pg_shard_test/ruleutils_94.c
--- pg_shard_orig/ruleutils_94.c	2014-12-05 13:27:10.353587256 -0800
+++ pg_shard_test/ruleutils_94.c	2014-12-05 15:08:07.674016323 -0800
@@ -6371,6 +6371,7 @@ generate_function_name(Oid funcid, int n
 	char	   *nspname;
 	FuncDetailCode p_result;
 	Oid			p_funcid;
+  Oid     p_packid;
 	Oid			p_rettype;
 	bool		p_retset;
 	int			p_nvargs;
@@ -6419,9 +6420,9 @@ generate_function_name(Oid funcid, int n
 	p_result = func_get_detail(list_make1(makeString(proname)),
 							   NIL, argnames, nargs, argtypes,
 							   !use_variadic, true,
-							   &p_funcid, &p_rettype,
+							   &p_funcid, &p_packid, &p_rettype,
 							   &p_retset, &p_nvargs, &p_vatype,
-							   &p_true_typeids, NULL);
+							   &p_true_typeids, NULL, NULL,T_FUNC,NULL);
 	if ((p_result == FUNCDETAIL_NORMAL ||
 		 p_result == FUNCDETAIL_AGGREGATE ||
 		 p_result == FUNCDETAIL_WINDOWFUNC) &&
diff -rupN pg_shard_orig/sql/distribution_metadata.sql pg_shard_test/sql/distribution_metadata.sql
--- pg_shard_orig/sql/distribution_metadata.sql	2014-12-05 13:27:10.354587230 -0800
+++ pg_shard_test/sql/distribution_metadata.sql	2014-12-05 15:13:54.785098390 -0800
@@ -52,7 +52,7 @@ VALUES
 	(107, 'cluster-worker-04', 5435, 3, 0),
 	(108, 'cluster-worker-04', 5435, 4, 0);
 
-INSERT INTO pgs_distribution_metadata.partition (relation_id, partition_method, key)
+INSERT INTO pgs_distribution_metadata.partition_info (relation_id, partition_method, key)
 VALUES
 	('events'::regclass, 'h', 'name');
 
